module Schwarzenbach
    import Base
    import Base.^

    ‚àû::Real = Inf
    export ‚àû

  # Mathematische notationen
    """
    The set of all DataTypes
    """
    ùïè = Any
    export ùïè
    """
    The set of Real numbers
    """
    ‚Ñù = Real
    export ‚Ñù

    """
    The set of Complex Number or all Numbers
    """
    ‚ÑÇ = Number
    export ‚ÑÇ

    """
    The set of Integer Numbers
    """
    ‚Ñ§ = Integer
    export ‚Ñ§

    """
    The set of Natural Numbers
    """
    ‚Ñï = Unsigned
    export ‚Ñï

    ‚àÖ = Nothing
    export ‚àÖ

    √∏ = nothing
    export √∏

    ‚Ñù‚Åø = AbstractVector{‚Ñù}
    ‚ÑÇ‚Åø = AbstractVector{‚ÑÇ}
    export ‚Ñù‚Åø
    export ‚ÑÇ‚Åø

    ‚Ñù‚ÅøÀ£·µê = AbstractMatrix{‚Ñù}
    ‚ÑÇ‚ÅøÀ£·µê = AbstractMatrix{‚ÑÇ}
    export ‚Ñù‚ÅøÀ£·µê
    export ‚ÑÇ‚ÅøÀ£·µê

    """
    ‚ÑÇ ‚Üí ‚ÑÇ

    x ‚Ü¶ log|x|
    """
    logabs(x::‚ÑÇ)::‚ÑÇ = log(abs(x))
    export logabs
    
    """
    ‚ÑÇ ‚Üí ‚ÑÇ

    x ‚Ü¶ log|x|
    """
    function logc(x::‚ÑÇ) ::‚ÑÇ
        if x >= +0.
            return log(x)
        else
            return log(x + Complex(0.0, 1e-10))
        end
    end
    export logc

    (^)(x::AbstractFloat, n::‚ÑÇ) = exp(logc(x)*n)
    (^)(x::Complex, n::‚ÑÇ) = exp(logc(x)*n)
    export ^

    function ‚ãÖ(a::‚ÑÇ, b::‚ÑÇ)::‚ÑÇ
        return a * b
    end
    
    function ‚ãÖ(a::Vector{T}, b::Vector{T}) ::T  where T
        return sum([a[i] * b[i] for i in 1:length(a)])
    end
    export ‚ãÖ
    
    function √ó(a::Vector, b::Vector)::Vector
        s::‚Ñ§ = length(a)
        c = zeros(s)
        for i in 1:(s-2)
            c[i] = a[i+1] * b[i+2] - a[i+1] * b[i+2]
        end
        c[s-1]= a[s] * b[1]  -  a[1] * b[s]
        c[s]  = a[1] * b[2]  -  a[2] * b[1]
        return c
    end
    export √ó
    
    function ‚äô(a::Vector, b::Vector) ::Vector
        return [a[i] * b[i] for i in 1:length(a)]
    end
    export ‚äô

  

    """
    function that prints the expression and its evaluations

    Example:

    ‚Å†>  what_is(3^3)

    ‚Å†<  3^3 = 27
    """
    function what_is(expr::String)
        # Evaluate the expression
        result = eval(Meta.parse(expr))
        # Print the expression and its evaluation
        println("$expr = $result")
    end
    export what_is

    macro echo(expr)
        return quote
            # Print the expression as entered
            println($(string(expr)), " = ", $(esc(expr)))
        end
    end
    export @echo

    macro swap!(a,b)
      quote
          tmp = $(esc(a))
          $(esc(a)) = $(esc(b))
          $(esc(b)) = tmp
      end
    end
    export @swap!
  

    """
    OR operator: a ‚à® b
    """
    function ‚à®(a::T, b::T) where T
        return T(Bool(a) || Bool(b))
    end
    export ‚à®

    """
    AND operator: a ‚àß b
    """
    function ‚àß(a::T, b::T) ::T where T
        if Bool(a)
            return T(Bool(b))
        else
            return T(false)
        end
    end
    export ‚àß

    """
    NOT operator: ¬¨a ‚â° !a
    """
    function ¬¨(a::T) ::T where T
        return T(!Bool(a))
    end
    export ¬¨

    """
    NOR operator: a ‚Üì b ‚â° ¬¨(a ‚à® b)
    """
    function ‚Üì(a::T, b::T) ::T where T
        return T(!(Bool(a) || Bool(b)))
    end
    export ‚Üì

    """
    NAND operator: a ‚Üë b ‚â° ¬¨(a ‚àß b)
    """
    function ‚Üë(a::T, b::T) ::T where T
        return T(!(Bool(a) && Bool(b)))
    end
    export ‚Üë

    """
    XOR operator: a ‚äï b ‚â° (a‚à®b) ‚àß (a‚Üëb)
    """
    function ‚äï(a::T, b::T) ::T where T
        return (a‚à®b) ‚àß (a‚Üëb)
    end
    export‚äï

    """
    Logical implication \\rightarrow operator: a ‚ü∂ b ‚â° ¬¨a ‚à® b
    """
    function ‚Üí(a,b)
        return ¬¨a ‚à® b
    end
    export‚Üí

    """
    Logical reverse-implication \\leftarrow operator: a ‚üµ b ‚â° b ‚ü∂ a
    """
    function ‚Üê(a,b)
        return b ‚Üí a
    end
    export ‚Üê

    """
    Logical equivalent \\leftrightarrow operator: a ‚ü∑ b ‚â° (a ‚ü∂ b) ‚àß (b ‚ü∂ a)
    """
    function ‚Üî(a,b)
        return (a ‚Üí b) ‚àß (b ‚Üí a)
    end
    export ‚Üî

    """
    ```julia
    test_logical_function(fn::Function, argC::‚Ñ§) -> ‚àÖ
    ```
    This function tests a logical function `logicalFunction` by evaluating it for all possible combinations of Boolean inputs, 
    given the number of arguments `argC`. The function prints the result for each combination in a readable format.

    # Arguments:
    - `fn::Function`: The logical function to be tested. It should accept `argC` Boolean arguments.
    - `argC::Int`: The number of arguments the logical function accepts.

    # Behavior:
    - Generates all possible combinations of `true` and `false` for the specified number of arguments (`argC`).
    - Evaluates the logical function with each combination of inputs.
    - Prints the input combination and the corresponding output in the format: `H(input1, input2, ...) = result`.

    # Example:
    ```julia
    H(A, B, C) = (A ‚Üí (B ‚à® C)) ‚Üí ((A ‚Üí B) ‚à® (A ‚Üí C))
    test_logical_function(H, 3)
    # Output:
    # H(true, true, true) = true
    # H(true, true, false) = true
    # H(true, false, true) = true
    # H(true, false, false) = true
    # H(false, true, true) = true
    # H(false, true, false) = true
    # H(false, false, true) = true
    # H(false, false, false) = true
    ````
    """
    function test_logical_function(fn::Function, argC::‚Ñ§) ::‚àÖ
        # Generate all combinations of true/false for `argC` arguments
        combinations = Iterators.product(fill((true, false), argC)...)
        
        # Evaluate the function for each combination and print it
        for inputs in combinations
            result = fn(inputs...)
            println("$fn($(join(inputs, ", "))) = $result")
        end
    end
    export test_logical_function

end # module Schwarzenbach

